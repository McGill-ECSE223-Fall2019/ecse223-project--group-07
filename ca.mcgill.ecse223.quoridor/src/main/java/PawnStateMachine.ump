namespace ca.mcgill.ecse223.quoridor.controller;

use QuoridorGame.ump;



class PawnBehaviour
{
    depend java.util.List;
    depend java.util.ArrayList;

    0. .1 - > 0. .1 Game currentGame;
    1--1 Player player;

    enum MoveDirection
    {
        North,
        South,
        East,
        West,
        Null
    }

    pawnSM
    {

        gameActive
        {

            Longitudinal
            {
                Between
                {

                    //self referential
                    //must add all the self referential stepMoves/jumpMoves here

                    //self referential step moves

                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.South && !stepNearBorder(dir) && !stepOnBorder(dir)] /
                    {
                        move(getCurrentRow() + 1, getCurrentColumn());
                    } - > Longitudinal.Between;

                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.North && !stepNearBorder(dir) && !stepOnBorder(dir)] /
                    {
                        move(getCurrentRow() - 1, getCurrentColumn());
                    } - > Longitudinal.Between;


                    //self referential jumpMoves
                    //with one direction

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.North && dir2 == MoveDirection.Null && isLegalJump(dir1, dir2) && !jumpNearBorder(dir1, dir2, 1) && !jumpOnBorder(dir1, dir2, 1)] /
                    {
                        move(getCurrentRow() - 2, getCurrentColumn());
                    } - > Longitudinal.Between;

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.South && dir2 == MoveDirection.Null && isLegalJump(dir1, dir2) && !jumpNearBorder(dir1, dir2, 1) && !jumpOnBorder(dir1, dir2, 1)] /
                    {
                        move(getCurrentRow() + 2, getCurrentColumn());
                    } - > Longitudinal.Between;


                    //with Double Direction
                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.North && (dir2 == MoveDirection.East || dir2 == MoveDirection.West) && isLegalJump(dir1, dir2) && !jumpNearBorder(dir1, dir2, 1) && !jumpOnBorder(dir1, dir2, 1)] - > Longitudinal.Between;

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.South && (dir2 == MoveDirection.West || dir2 == MoveDirection.East) && isLegalJump(dir1, dir2) && !jumpNearBorder(dir1, dir2, 1) && !jumpOnBorder(dir1, dir2, 1)] - > Longitudinal.Between;




                    //the step moves to near a border
                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.South && stepNearBorder(dir)] /
                    {
                        move(getCurrentRow() + 1, getCurrentColumn());
                    } - > SouthBordernearBorder;

                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.North && stepNearBorder(dir)] /
                    {
                        move(getCurrentRow() - 1, getCurrentColumn());
                    } - > NorthBordernearBorder;

                    //the jump moves

                    //with Single direction
                    //->nearBorder
                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.North && dir2 == MoveDirection.Null && isLegalJump(dir1, dir2) && jumpNearBorder(dir1, dir2, 1)] /
                    {
                        move(getCurrentRow() - 2, getCurrentColumn());
                    } - > NorthBordernearBorder;

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.South && dir2 == MoveDirection.Null && isLegalJump(dir1, dir2) && jumpNearBorder(dir1, dir2, 1)] /
                    {
                        move(getCurrentRow() + 2, getCurrentColumn());
                    } - > SouthBordernearBorder;
                    //->onBorder
                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.North && dir2 == MoveDirection.Null && isLegalJump(dir1, dir2) && jumpOnBorder(dir1, dir2, 1)] /
                    {
                        move(getCurrentRow() - 2, getCurrentColumn());
                    } - > NorthBorderOnBorder;

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.South && dir2 == MoveDirection.Null && isLegalJump(dir1, dir2) && jumpOnBorder(dir1, dir2, 1)] /
                    {
                        move(getCurrentRow() + 2, getCurrentColumn());
                    } - > SouthBorderOnBorder;

                    //with Double Direction
                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.North && (dir2 == MoveDirection.East || dir2 == MoveDirection.West) && isLegalJump(dir1, dir2) && jumpNearBorder(dir1, dir2, 1)] - > NorthBordernearBorder;

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.South && (dir2 == MoveDirection.West || dir2 == MoveDirection.East) && isLegalJump(dir1, dir2) && jumpNearBorder(dir1, dir2, 1)] - > SouthBordernearBorder;

                }




                SouthBordernearBorder
                {

                    //the step moves 
                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.South] /
                    {
                        move(getCurrentRow() + 1, getCurrentColumn());
                    } - > SouthBorderOnBorder;

                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.North] /
                    {
                        move(getCurrentRow() - 1, getCurrentColumn());
                    } - > Longitudinal.Between;

                    //the jump Moves

                    //with single direction

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.North && dir2 == MoveDirection.Null && isLegalJump(dir1, dir2)] /
                    {
                        move(getCurrentRow() - 2, getCurrentColumn());
                    } - > Longitudinal.Between;

                    //with double direction

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.North && (dir2 == MoveDirection.East || dir2 == MoveDirection.West) && isLegalJump(dir1, dir2)] - > Longitudinal.Between;

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.South && (dir2 == MoveDirection.West || dir2 == MoveDirection.East) && isLegalJump(dir1, dir2)] - > SouthBorderOnBorder;


                }
                SouthBorderOnBorder
                {

                    entry /
                    {
                        testVictory();
                    };


                    //the step moves
                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.North] /
                    {
                        move(getCurrentRow() - 1, getCurrentColumn());
                    } - > SouthBordernearBorder;

                    //the jump moves
                    //single direction

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.North && dir2 == MoveDirection.Null && isLegalJump(dir1, dir2)] /
                    {
                        move(getCurrentRow() - 2, getCurrentColumn());
                    } - > Longitudinal.Between;




                    //double direction
                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.North && (dir2 == MoveDirection.East || dir2 == MoveDirection.West) && isLegalJump(dir1, dir2)] - > SouthBordernearBorder;

                }




                //the NORTH  


                NorthBordernearBorder
                {

                    //the step moves 
                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.South] /
                    {
                        move(getCurrentRow() + 1, getCurrentColumn());
                    } - > Longitudinal.Between;

                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.North] /
                    {
                        move(getCurrentRow() - 1, getCurrentColumn());
                    } - > NorthBorderOnBorder;

                    //the jump Moves

                    //with single direction

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.South && dir2 == MoveDirection.Null && isLegalJump(dir1, dir2)] /
                    {
                        move(getCurrentRow() + 2, getCurrentColumn());
                    } - > Longitudinal.Between;

                    //with double direction

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.North && (dir2 == MoveDirection.East || dir2 == MoveDirection.West) && isLegalJump(dir1, dir2)] - > NorthBorderOnBorder;

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.South && (dir2 == MoveDirection.West || dir2 == MoveDirection.East) && isLegalJump(dir1, dir2)] - > Longitudinal.Between;


                }
                NorthBorderOnBorder
                {
                    entry /
                    {
                        testVictory();
                    };
                    //the step moves
                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.South] /
                    {
                        move(getCurrentRow() + 1, getCurrentColumn());
                    } - > NorthBordernearBorder;


                    //jump move

                    //single direction
                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.South && dir2 == MoveDirection.Null && isLegalJump(dir1, dir2)] /
                    {
                        move(getCurrentRow() + 2, getCurrentColumn());
                    } - > Longitudinal.Between;


                    //double direction

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir1 == MoveDirection.South && (dir2 == MoveDirection.West || dir2 == MoveDirection.East) && isLegalJump(dir1, dir2)] - > NorthBordernearBorder;


                }


            }


            ||




            Latitudinal
            {

                //to setup initial latitude state depending on who is the player
                initialize[hasGameAsWhite()] - > WestBorderOnBorder;
                initialize[hasGameAsBlack()] - > EastBorderOnBorder;



                EastBordernearBorder
                {

                    //the step moves 
                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.East] /
                    {
                        move(getCurrentRow(), getCurrentColumn() + 1);
                    } - > EastBorderOnBorder;

                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.West] /
                    {
                        move(getCurrentRow(), getCurrentColumn() - 1);
                    } - > Latitudinal.Between;

                    //the jump Moves

                    //with single direction

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.West && dir1 == MoveDirection.Null && isLegalJump(dir1, dir2)] /
                    {
                        move(getCurrentRow(), getCurrentColumn() - 2);
                    } - > Latitudinal.Between;

                    //with double direction

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.West && (dir1 == MoveDirection.North || dir1 == MoveDirection.South) && isLegalJump(dir1, dir2)] /
                    {
                        if (dir1 == MoveDirection.South)
                        {
                            move(getCurrentRow() + 1, getCurrentColumn() - 1);
                        }
                        else
                        {

                            move(getCurrentRow() - 1, getCurrentColumn() - 1);
                        }
                    } - > Latitudinal.Between;

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.East && (dir1 == MoveDirection.North || dir1 == MoveDirection.South) && isLegalJump(dir1, dir2)] /
                    {
                        if (dir1 == MoveDirection.South)
                        {
                            move(getCurrentRow() + 1, getCurrentColumn() + 1);
                        }
                        else
                        {

                            move(getCurrentRow() - 1, getCurrentColumn() + 1);
                        }
                    } - > EastBorderOnBorder;


                }
                EastBorderOnBorder
                {

                    entry /
                    {
                        testVictory();
                    };


                    //the step moves
                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.West] /
                    {
                        move(getCurrentRow(), getCurrentColumn() - 1);
                    } - > EastBordernearBorder;

                    //the jump moves
                    //single direction

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.West && dir1 == MoveDirection.Null && isLegalJump(dir1, dir2)] /
                    {
                        move(getCurrentRow() - 2, getCurrentColumn());
                    } - > Latitudinal.Between;




                    //double direction
                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.West && (dir1 == MoveDirection.North || dir1 == MoveDirection.South) && isLegalJump(dir1, dir2)] /
                    {
                        if (dir1 == MoveDirection.South)
                        {
                            move(getCurrentRow() + 1, getCurrentColumn() - 1);
                        }
                        else
                        {

                            move(getCurrentRow() - 1, getCurrentColumn() - 1);
                        }
                    } - > EastBordernearBorder;

                }



                Between
                {

                    //self referential
                    //must add all the self referential stepMoves/jumpMoves here

                    //self referential step moves

                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.East && !stepNearBorder(dir) && !stepOnBorder(dir)] /
                    {
                        move(getCurrentRow(), getCurrentColumn() + 1);
                    } - > Latitudinal.Between;

                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.West && !stepNearBorder(dir) && !stepOnBorder(dir)] /
                    {
                        move(getCurrentRow(), getCurrentColumn() - 1);
                    } - > Latitudinal.Between;


                    //self referential jumpMoves
                    //with one direction

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.West && dir1 == MoveDirection.Null && isLegalJump(dir1, dir2) && !jumpNearBorder(dir1, dir2, 2) && !jumpOnBorder(dir1, dir2, 2)] /
                    {
                        move(getCurrentRow(), getCurrentColumn() - 2);
                    } - > Latitudinal.Between;

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.East && dir1 == MoveDirection.Null && isLegalJump(dir1, dir2) && !jumpNearBorder(dir1, dir2, 2) && !jumpOnBorder(dir1, dir2, 2)] /
                    {
                        move(getCurrentRow(), getCurrentColumn() + 2);
                    } - > Latitudinal.Between;


                    //with Double Direction
                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.West && (dir1 == MoveDirection.North || dir1 == MoveDirection.South) && isLegalJump(dir1, dir2) && !jumpNearBorder(dir1, dir2, 1) && !jumpOnBorder(dir1, dir2, 2)] /
                    {
                        if (dir1 == MoveDirection.South)
                        {
                            move(getCurrentRow() + 1, getCurrentColumn() - 1);
                        }
                        else
                        {

                            move(getCurrentRow() - 1, getCurrentColumn() - 1);
                        }
                    } - > Latitudinal.Between;

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.East && (dir1 == MoveDirection.North || dir1 == MoveDirection.South) && isLegalJump(dir1, dir2) && !jumpNearBorder(dir1, dir2, 1) && !jumpOnBorder(dir1, dir2, 2)] /
                    {
                        if (dir1 == MoveDirection.South)
                        {
                            move(getCurrentRow() + 1, getCurrentColumn() + 1);
                        }
                        else
                        {

                            move(getCurrentRow() - 1, getCurrentColumn() + 1);
                        }
                    } - > Latitudinal.Between;




                    //the step moves to near a border
                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.East && stepNearBorder(dir)] /
                    {
                        move(getCurrentRow(), getCurrentColumn() + 1);
                    } - > EastBordernearBorder;

                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.West && stepNearBorder(dir)] /
                    {
                        move(getCurrentRow(), getCurrentColumn() - 1);
                    } - > WestBordernearBorder;

                    //the jump moves

                    //with Single direction
                    //->nearBorder
                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.West && dir1 == MoveDirection.Null && isLegalJump(dir1, dir2) && jumpNearBorder(dir1, dir2, 2)] /
                    {
                        move(getCurrentRow(), getCurrentColumn() - 2);
                    } - > WestBordernearBorder;

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.East && dir1 == MoveDirection.Null && isLegalJump(dir1, dir2) && jumpNearBorder(dir1, dir2, 2)] /
                    {
                        move(getCurrentRow(), getCurrentColumn() + 2);
                    } - > EastBordernearBorder;
                    //->onBorder
                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.West && dir1 == MoveDirection.Null && isLegalJump(dir1, dir2) && jumpOnBorder(dir1, dir2, 2)] /
                    {
                        move(getCurrentRow(), getCurrentColumn() - 2);
                    } - > WestBorderOnBorder;

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.East && dir1 == MoveDirection.Null && isLegalJump(dir1, dir2) && jumpOnBorder(dir1, dir2, 2)] /
                    {
                        move(getCurrentRow(), getCurrentColumn() + 2);
                    } - > EastBorderOnBorder;

                    //with Double Direction
                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.West && (dir1 == MoveDirection.North || dir1 == MoveDirection.South) && isLegalJump(dir1, dir2) && jumpNearBorder(dir1, dir2, 1)] /
                    {
                        if (dir1 == MoveDirection.South)
                        {
                            move(getCurrentRow() + 1, getCurrentColumn() - 1);
                        }
                        else
                        {

                            move(getCurrentRow() - 1, getCurrentColumn() - 1);
                        }
                    } - > WestBordernearBorder;

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.East && (dir1 == MoveDirection.North || dir1 == MoveDirection.South) && isLegalJump(dir1, dir2) && jumpNearBorder(dir1, dir2, 1)] /
                    {
                        if (dir1 == MoveDirection.South)
                        {
                            move(getCurrentRow() + 1, getCurrentColumn() + 1);
                        }
                        else
                        {

                            move(getCurrentRow() - 1, getCurrentColumn() + 1);
                        }
                    } - > EastBordernearBorder;


                }




                //the West  


                WestBordernearBorder
                {

                    //the step moves 
                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.East] /
                    {
                        move(getCurrentRow(), getCurrentColumn() + 1);
                    } - > Latitudinal.Between;

                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.West] /
                    {
                        move(getCurrentRow(), getCurrentColumn() - 1);
                    } - > WestBorderOnBorder;

                    //the jump Moves

                    //with single direction

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.East && dir1 == MoveDirection.Null && isLegalJump(dir1, dir2)] /
                    {
                        move(getCurrentRow(), getCurrentColumn() + 2)
                    } - > Latitudinal.Between;

                    //with double direction

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.West && (dir1 == MoveDirection.North || dir1 == MoveDirection.South) && isLegalJump(dir1, dir2)] /
                    {
                        if (dir1 == MoveDirection.South)
                        {
                            move(getCurrentRow() + 1, getCurrentColumn() - 1);
                        }
                        else
                        {


                            move(getCurrentRow() - 1, getCurrentColumn() - 1);

                        }
                    } - > WestBorderOnBorder;



                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.East && (dir1 == MoveDirection.North || dir1 == MoveDirection.South) && isLegalJump(dir1, dir2)] /
                    {
                        if (dir1 == MoveDirection.South)
                        {
                            move(getCurrentRow() + 1, getCurrentColumn() + 1);
                        }
                        else
                        {


                            move(getCurrentRow() - 1, getCurrentColumn() + 1);

                        }
                    } - > Latitudinal.Between;


                }
                WestBorderOnBorder
                {
                    entry /
                    {
                        testVictory();
                    };
                    //the step moves
                    stepMove(MoveDirection dir)[isLegalStep(dir) && dir == MoveDirection.East] /
                    {
                        move(getCurrentRow(), getCurrentColumn() + 1);
                    } - > WestBordernearBorder;


                    //jump move

                    //single direction
                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.East && dir1 == MoveDirection.Null && isLegalJump(dir1, dir2)] /
                    {
                        move(getCurrentRow(), getCurrentColumn() + 2);
                    } - > Latitudinal.Between;


                    //double direction

                    jumpMove(MoveDirection dir1, MoveDirection dir2)[dir2 == MoveDirection.East && (dir1 == MoveDirection.North || dir1 == MoveDirection.South) && isLegalJump(dir1, dir2)] /
                    {
                        if (dir1 == MoveDirection.South)
                        {
                            move(getCurrentRow() + 1, getCurrentColumn() + 1);
                        }
                        else
                        {


                            move(getCurrentRow() - 1, getCurrentColumn() + 1);

                        }
                    } - > WestBordernearBorder;



                }



            }
            gameCompleted() - > gameComplete;
        }

        gameComplete
        {
            entry /
            {
                displayResults();
            }
        }
    }
}