namespace ca.mcgill.ecse223.quoridor.controller;

use QuoridorGame.ump;


class PawnBehavior {

enum MoveDirection { East, South, West, North }

    0..1 -> 0..1 Game currentGame;
    0..1 -> 0..1 Player player;
    0..1->* Tile PossibleMoves;

    pawnSM {
      gameActive{
        
        unmoved{
        
          unchecked{
            entry/{getPossibleMoves();}
         ->checked;
          }
          
          checked{
          doStepMove(MoveDirection direction)[isLegalStepMove()]->stepMove;
          doJumpMove(MoveDirection direction, MoveDirection direction2)[isLegalJumpMove()]->jumpMove;
            
            doStepMove(MoveDirection direction)[!isLegalStepMove()]/{illegalMove();}->checked;
            doJumpMove(MoveDirection direction, MoveDirection direction2)[!isLegalJumpMove()]/{illegalMove();}->checked;
           
          }
          nextPlayerTurn->unmoved;
        }
        
        moving{
          stepMove{
          }
        
          jumpMove{
          }
        ->unmoved;
          exit/{completeTurn();}
        }
        
        
        
        
        
        gameCompleted->gameOver;
      }
      
      gameOver{}
    }


  
  
  
}


    // Returns the current row number of the pawn
    //int getCurrentPawnRow() { return 0; }
    // Returns the current column number of the pawn
    //int getCurrentPawnColumn() { return 0; }
    // Returns if it is legal to step in the given direction
    //boolean isLegalStep(MoveDirection dir) { return false; }
    // Returns if it is legal to jump in the given direction
    //boolean isLegalJump(MoveDirection dir) { return false; }

    // Action to be called when an illegal move is attempted
    //void illegalMove() { }
    
    // Enumeration for the possible moving directions
    // (directions are from the viewpoint of white player)
    //enum MoveDirection { East, South, West, North; }
}
